

1. FLUX 패턴에 대하여 설명해보세요

과거 MVC 패턴 ( Model, View, Controller ) 의 에러추적이 어렵다는 단점을 보완하기 위해
데이터가 한 방향으로 흐르게 바뀔필요가 있어 등장하게 되었다.

action -> dispatcher -> model(store) -> View

    * action -> 변경할 데이터 객체, dispatcher를 통해서 store에 전달
    * dispatcher -> 데이터 흐름을 관리(통로, 전달, 매개체)
    * store -> 상태(state)의 저장소, state를 변경할 수 있는 함수 또한 가지고 있음. dispatcher에서 전달된 값만 수정할 수 있음
    * view -> 화면


2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
        - 상태를 변경 혹은 업데이트하는 로직을 컴포넌트에서 분리
    (2) useContext
        - 전역상태 관리를 위한 도구, 기능 자체는 redux와 동일
        - 보통은 업데이트 로직을 관리할 수 있는 reducer와 함께 사용
        - oop를 활용한 프론트엔드 Dependency Inversion(의존성 주입)에 응용가능
        > OOP : object oriented programming

3. 전역 상태 관리를 해야하는 이유는 무엇일까요
====> 에러 추적이 조금 더 편리하게 만들기 위한 redux와 같은 라이브러리 만듬


4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요.

   장점: 유지보수에 좋고 data가 단방향으로 흐르기에 코드가독성이 좋아진다. 
   단점: 상태와 변이방법을 정의하기 위한 redux와 action의 코딩량이 많고,
         지속적으로 로컬 스토어 상태를 원격 서버 상태와 동기화를 위한 
         saga같은 미들웨어가 추가되면 기능 하나당 추가해야하는 코딩량은 더 많아진다. 